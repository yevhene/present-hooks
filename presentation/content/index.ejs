<section>
  <h1>React with Blackjack and Hooks</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" rel="nofollow noopener" href="https://github.com/yevhene/present-hooks">yevhene/present-hooks</a>
  </small>
</section>

<section>
  <h2>Hooks</h2>

  <section>
    <p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>
  </section>

  <section>
    <h3>Hooks will help to avoid: </h3>

    <ul>
      <li><b>Huge components</b> that are hard to refactor and test.</li>
      <li><b>Duplicated logic</b> between different components and lifecycle methods.</li>
      <li><b>Complex patterns</b> like render props and higher-order components.</li>
    </ul>
  </section>
</section>

<section>
  <section>
    <h3>Before</h3>

    <img src="images/refactoring-before.jpeg" />
  </section>

  <section>
    <h3>After</h3>

    <img src="images/refactoring-after.jpeg" />
  </section>
</section>

<section>
  <h2>Links</h2>

  <ul>
    <li><b>Introduction:</b> <a href="https://reactjs.org/docs/hooks-intro.html">Hooks Official Docs</a></li>
    <li><b>Further Information:</b> <a href="https://github.com/rehooks/awesome-react-hooks">awesome-react-hooks</a></li>
  </ul>
</section>

<section>
  <img src="images/the-end.png" />
</section>

<section>
  <h2>useState</h2>

  <section>
    <pre><code class="javascript" data-trim contenteditable>
import React, { useState } from 'react'

function Counter() {
  const [count, setCount] = useState(0)

  return (
    &lt;button onClick={setCount(count + 1)}&gt;
      {count}
    &lt;/button&gt;
  )
}
    </code></pre>
  </section>
</section>

<section>
  <h2>useEffect</h2>

  <section>
    <h3>componentDidMount/componentDidUpdate</h3>

    <pre><code class="javascript" data-trim contenteditable>
function Counter() {
  const [count, setCount] = useState(0)

  useEffect(() =&gt; notify(count), [count])

  return (
    &lt;button onClick={setCount(count + 1)}&gt;
      {count}
    &lt;/button&gt;
  );
}
    </code></pre>
  </section>

  <section>
    <h3>componentWillUnmount</h3>

    <pre><code class="javascript" data-trim contenteditable>
function UserFeed({ userId }) {
  const [feed, setFeed] = useState([])

  useEffect(() =&gt; {
    subscribe(userId, (userFeed) =&gt; setFeed(userFeed))

    return () =&gt; unsubscribe()
  }, [userId])

  return &lt;Feed feed={feed}&gt;
}
    </code></pre>
  </section>
</section>

<section>
  <h2>How It Works</h2>

  <section>
    <h3>Explanation</h3>

    <pre><code class="javascript" data-trim contenteditable>
// ------------
// First render
// ------------
// 1. Initialize the name state variable with []
useState([])
// 2. Subscribe
useEffect(() =&gt; {...}, [...])
    </code></pre>

    <pre><code class="javascript" data-trim contenteditable>
// -------------
// Second render
// -------------
// 1. Read the name state variable (argument is ignored)
useState([])
// 2. Unsubscribe and Subscribe
// (effect is replaced according to square brackets)
useEffect(() =&gt; {...}, [...])
    </code></pre>
  </section>

  <section>
    <h3>Inside</h3>

    <img src="images/hooks-inside.svg" />
  </section>

  <section>
    <h3>Hooks Rules</h3>

    <ul>
      <li>Only call hooks at the top level. Don't call hooks inside loops, conditions, or nested functions.</li>
      <li>Only call hooks from React function components. Don't call hooks from regular JavaScript functions. (There is just one other valid place to call hooks — your own custom hooks.</li>
    </ul>
  </section>

  <section>
    <h3>ESLint</h3>

    <pre><code class="javascript" data-trim contenteditable>
npm install eslint-plugin-react-hooks --save-dev
    </code></pre>
    <pre><code class="javascript" data-trim contenteditable>
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    // Checks rules of Hooks
    "react-hooks/rules-of-hooks": "error",
    // Checks effect dependencies
    "react-hooks/exhaustive-deps": "warn"
  }
}
    </code></pre>
  </section>
</section>

<section>
  <h2>More Hooks</h2>

  <section>
    <h3>Built in</h3>

    <ul>
      <li>useContext</li>
      <li>useReducer</li>
      <li>useCallback</li>
      <li>useMemo</li>
      <li>useRef</li>
      <li>useImperativeHandle</li>
      <li>useLayoutEffect</li>
      <li>useDebugValue</li>
      <li>useListener</li>
    </ul>
  </section>

  <section>
    <h3>Custom Hooks</h3>

    <pre><code class="javascript" data-trim contenteditable>
function useSuscription(userId) {
  const [feed, setFeed] = useState([])

  useEffect(() =&gt; {
    subscribe(userId, (userFeed) =&gt; setFeed(userFeed))

    return () =&gt; unsubscribe()
  }, [userId])

  return feed
}
    </code></pre>

    <pre><code class="javascript" data-trim contenteditable>
function UserFeed({ userId }) {
  const feed = useSubscription(userId)

  return &lt;Feed feed={feed}&gt;
}
    </code></pre>
  </section>

  <section>
    <h3><a href="https://usehooks.com">useHooks</a></h3>

    <ul>
      <li>useEventListener</li>
      <li>useWhyDidYouUpdate</li>
      <li>useLockBodyScroll</li>
      <li>useHistory</li>
      <li>useKeyPress</li>
      <li>...</li>
    </ul>
  </section>

  <section>
    <h3>Libraries</h3>

    <h4>react-spring</h4>

    <pre><code class="javascript" data-trim contenteditable>
import {useSpring, animated} from 'react-spring'

const [props, set, stop] = useSpring(() =&gt; ({ opacity: 1 }))

// Update spring with new props
set({ opacity: toggle ? 1 : 0 })
// Stop animation
stop()
    </code></pre>
  </section>

  <section>
    <h3>Redux</h3>

    <a href="https://react-redux.js.org/next/api/hooks">useSelector</a>

    <pre><code class="javascript" data-trim contenteditable>
import React from 'react'
import { useSelector } from 'react-redux'

export const CounterComponent = () =&gt; {
  const counter = useSelector(state =&gt; state.counter)
  return &lt;div&gt;{counter}&lt;/div&gt;
}
    </code></pre>
  </section>
</section>

<section>
  <h2>Do Hooks cover all use cases for classes?</h2>

  <section>
    <h3>shouldComponentUpdate</h3>

    <p><code>React.memo</code></p>

    <pre><code class="javascript" data-trim contenteditable>
const MyComponent = React.memo(function MyComponent(props) {
  /* only rerenders if props change */
})
    </code></pre>
  </section>

  <section>
    <p>There are no Hook equivalents to the uncommon <code>getSnapshotBeforeUpdate</code> and <code>componentDidCatch</code> lifecycles yet, but we plan to add them soon.</p>
  </section>
</section>

<section>
  <h2>References</h2>

  <ul>
    <li><a href="https://twitter.com/threepointone/status/1056594421079261185">Sunil Pai: Before/After refactoring images</a></li>
    <li><a href="https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba">Eytan Manor: Under the hood of React’s hooks system</a></li>
  </ul>
</section>

<section>
  <h2>Questions?</h2>
</section>
