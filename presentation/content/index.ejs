<section>
  <h1>React with Blackjack and Hooks</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" rel="nofollow noopener" href="https://github.com/yevhene/hooks">yevhene/present-hooks</a>
  </small>
</section>

<section>
  <h2>Hooks</h2>

  <section>
    <p>Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>
  </section>
</section>

<section>
  <h2>Links</h2>

  <ul>
    <li><b>Introduction:</b> <a href="https://reactjs.org/docs/hooks-intro.html">Hooks Official Docs</a></li>
    <li><b>Examples:</b> <a href="https://usehooks.com">usehooks.com</a></li>
    <li><b>Internal Details:</b> <a href="https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba">Under the hood of React’s hooks system</a></li>
  </ul>
</section>

<section>
  <h2>Basic Hooks</h2>

  <section>
    <h3>useState</h3>
    <pre><code class="javascript" data-trim contenteditable>
import React, { useState } from 'react'

function Counter() {
  const [count, setCount] = useState(0)

  return (
    &lt;button onClick={setCount(count + 1)}&gt;
      {count}
    &lt;/button&gt;
  )
}
    </code></pre>
  </section>

  <section>
    <h3>useEffect</h3>

    <p>Instead of <code>componentDidMount</code>, <code>componentDidUpdate</code> and <code>componentWillUnmount</code></p>

    <pre><code class="javascript" data-trim contenteditable>
function Counter() {
  const [count, setCount] = useState(0)

  useEffect(() =&gt; notify(count), [count])

  return (
    &lt;button onClick={setCount(count + 1)}&gt;
      {count}
    &lt;/button&gt;
  );
}
    </code></pre>
    <pre><code class="javascript" data-trim contenteditable>
function Subscription() {
  useEffect(() =&gt; {
    subscribe()
    return () =&gt; unsubscribe()
  })
}
    </code></pre>
  </section>

  <section>
    <h3>useContext</h3>

    <p>Instead of <code>Context.Consumer</code></p>

    <pre><code class="javascript" data-trim contenteditable>
const SessionContext = React.createContext(null)

function App() {
  &lt;SessionContext.Provider value={currentUser}&gt;
    &lt;Content /&gt;
  &lt;/SessionContext.Provider&gt;
}

function Content() {
  const auth = useContext(SessionContext)
  // DO STUFF
}
    </code></pre>
  </section>
</section>

<section>
  <h2>How It Works</h2>

  <section>
    <h3>Example</h3>

    <pre><code class="javascript" data-trim contenteditable>
function Username() {
  // 1. Use the username state variable
  const [username, setUsername] = useState('Loading...')

  // 2. Use an effect for fetching username
  useEffect(() =&gt; {
    fetchUser().then(user =&gt; setUsername(user.name))
  }, [])

  return &lt;div&gt;{username}&lt;/div&gt;
}
    </code></pre>
  </section>

  <section>
    <h3>Explanation</h3>

    <pre><code class="javascript" data-trim contenteditable>
// ------------
// First render
// ------------
// 1. Initialize the name state variable with 'Loading...'
useState('Loading...')
// 2. Fetch
useEffect(() =&gt; {...})
    </code></pre>

    <pre><code class="javascript" data-trim contenteditable>
// -------------
// Second render
// -------------
// 1. Read the name state variable (argument is ignored)
useState('Loading...')
// 2. Fetch (effect is replaced)
useEffect(() =&gt; {...})
    </code></pre>
  </section>

  <section>
    <h3>Inside</h3>

    <img src="images/hooks-inside.svg" />
  </section>

  <section>
    <h3>Hooks Rules</h3>

    <ul>
      <li>Only call hooks at the top level. Don't call hooks inside loops, conditions, or nested functions.</li>
      <li>Only call hooks from React function components. Don't call hooks from regular JavaScript functions. (There is just one other valid place to call hooks — your own custom hooks.</li>
    </ul>
  </section>

  <section>
    <h3>Custom Hooks</h3>

    <pre><code class="javascript" data-trim contenteditable>
function useAuth() {
  const [user, setUser] = useState(null)

  useEffect(() =&gt;
    authorize(config.credentials).then(user =&gt; setUser(user))
  , [])

  return user
}
    </code></pre>

    <pre><code class="javascript" data-trim contenteditable>
function Profile() {
  const user = useAuth()
  // RENDER STUFF
}
    </code></pre>
  </section>

  <section>
    <h3>ESLint</h3>

    <pre><code class="javascript" data-trim contenteditable>
npm install eslint-plugin-react-hooks --save-dev
    </code></pre>
    <pre><code class="javascript" data-trim contenteditable>
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    // Checks rules of Hooks
    "react-hooks/rules-of-hooks": "error",
    // Checks effect dependencies
    "react-hooks/exhaustive-deps": "warn"
  }
}
    </code></pre>
  </section>
</section>

<section>
  <h2>Additional Hooks</h2>

  <section>
    <h3>useReducer</h3>

    <p>Useful to incapsulate complex logic</p>

    <pre><code class="javascript" data-trim contenteditable>
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 }
    default:
      throw new Error()
  }
}
    </code></pre>

    <pre><code class="javascript" data-trim contenteditable>
function Counter({ initialCount }) {
  const [state, dispatch] = useReducer(reducer, { count: 0 })

  return (
    &lt;button onClick={() =&gt; dispatch({ type: 'increment' })}&gt;
      {state.count}
    &lt;/button&gt;
  )
}
    </code></pre>
  </section>

  <section>
    <h3>useCallback</h3>

    <p>To avoid unnecessary re-render</p>

    <pre><code class="javascript" data-trim contenteditable>
const handleClick = useCallback(
  () =&gt; doSomething(a, b),
  [a, b]
)
    </code></pre>
  </section>

  <section>
    <h3>useMemo</h3>

    <p>To avoid same complex computations</p>

    <pre><code class="javascript" data-trim contenteditable>
const calculateYourMomsWeight = useMemo(
  () =&gt; compute(a, b),
  [a, b]
)
    </code></pre>
  </section>

  <section>
    <h3>useRef</h3>

    <p>A replacement for <code>React.createRef</code> and for instance variables</p>

    <pre><code class="javascript" data-trim contenteditable>
const hateThisJqueryPluginRef = useRef(null)

hateThisJqueryPluginRef.current
    </code></pre>
  </section>

  <section>
    <h3>useImperativeHandle</h3>

    <p>To create custom ref methods. Should be used with <code>React.forwardRef</code></p>

    <pre><code class="javascript" data-trim contenteditable>
function FancyInput(props, ref) {
  const inputRef = useRef()
  useImperativeHandle(ref, () =&gt; ({
    focus: () =&gt; {
      inputRef.current.focus()
    }
  }));
  return &lt;input ref={inputRef} ... /&gt;
}
FancyInput = forwardRef(FancyInput)
    </code></pre>
  </section>

  <section>
    <h3>useLayoutEffect</h3>

    <p>Same us useEffect but runs synchronously after all DOM mutations. (Before paint).</p>
  </section>

  <section>
    <h3>useDebugValue</h3>

    <pre><code class="javascript" data-trim contenteditable>
function useFriendStatus(friendID) {
  const [isOnline, setIsOnline] = useState(false)

  // Show a label in DevTools next to this Hook
  // e.g. "FriendStatus: Online"
  useDebugValue(isOnline ? 'Online' : 'Offline')

  return isOnline
}
    </code></pre>
  </section>

  <section>
    <h3>useListener</h3>

    <p>For a brand new <b>Flare</b> event system</p>
  </section>
</section>

<section>
  <h2>Libraries</h2>

  <section>
    <h3>react-spring</h3>

    <pre><code class="javascript" data-trim contenteditable>
import {useSpring, animated} from 'react-spring'

const [props, set, stop] = useSpring(() =&gt; ({ opacity: 1 }))

// Update spring with new props
set({ opacity: toggle ? 1 : 0 })
// Stop animation
stop()
    </code></pre>
  </section>
</section>

<section>
  <h2>Do Hooks cover all use cases for classes?</h2>

  <section>
    <h3>shouldComponentUpdate</h3>

    <p><code>React.memo</code></p>

    <pre><code class="javascript" data-trim contenteditable>
const MyComponent = React.memo(function MyComponent(props) {
  /* only rerenders if props change */
})
    </code></pre>
  </section>

  <section>
    <p>There are no Hook equivalents to the uncommon <code>getSnapshotBeforeUpdate</code> and <code>componentDidCatch</code> lifecycles yet, but we plan to add them soon.</p>
  </section>
</section>

<section>
  <h2>Questions?</h2>
</section>
